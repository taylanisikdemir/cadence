// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/cadence/common/activecluster (interfaces: Manager)
//
// Generated by this command:
//
//	mockgen -package activecluster -destination manager_mock.go -self_package github.com/uber/cadence/common/activecluster github.com/uber/cadence/common/activecluster Manager
//

// Package activecluster is a generated GoMock package.
package activecluster

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	types "github.com/uber/cadence/common/types"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// ClusterNameForFailoverVersion mocks base method.
func (m *MockManager) ClusterNameForFailoverVersion(failoverVersion int64, domainID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterNameForFailoverVersion", failoverVersion, domainID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterNameForFailoverVersion indicates an expected call of ClusterNameForFailoverVersion.
func (mr *MockManagerMockRecorder) ClusterNameForFailoverVersion(failoverVersion, domainID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterNameForFailoverVersion", reflect.TypeOf((*MockManager)(nil).ClusterNameForFailoverVersion), failoverVersion, domainID)
}

// CurrentRegion mocks base method.
func (m *MockManager) CurrentRegion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentRegion")
	ret0, _ := ret[0].(string)
	return ret0
}

// CurrentRegion indicates an expected call of CurrentRegion.
func (mr *MockManagerMockRecorder) CurrentRegion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentRegion", reflect.TypeOf((*MockManager)(nil).CurrentRegion))
}

// LookupCluster mocks base method.
func (m *MockManager) LookupCluster(ctx context.Context, domainID, clusterName string) (*LookupResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupCluster", ctx, domainID, clusterName)
	ret0, _ := ret[0].(*LookupResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupCluster indicates an expected call of LookupCluster.
func (mr *MockManagerMockRecorder) LookupCluster(ctx, domainID, clusterName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupCluster", reflect.TypeOf((*MockManager)(nil).LookupCluster), ctx, domainID, clusterName)
}

// LookupNewWorkflow mocks base method.
func (m *MockManager) LookupNewWorkflow(ctx context.Context, domainID string, policy *types.ActiveClusterSelectionPolicy) (*LookupResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupNewWorkflow", ctx, domainID, policy)
	ret0, _ := ret[0].(*LookupResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupNewWorkflow indicates an expected call of LookupNewWorkflow.
func (mr *MockManagerMockRecorder) LookupNewWorkflow(ctx, domainID, policy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupNewWorkflow", reflect.TypeOf((*MockManager)(nil).LookupNewWorkflow), ctx, domainID, policy)
}

// LookupWorkflow mocks base method.
func (m *MockManager) LookupWorkflow(ctx context.Context, domainID, wfID, rID string) (*LookupResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupWorkflow", ctx, domainID, wfID, rID)
	ret0, _ := ret[0].(*LookupResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupWorkflow indicates an expected call of LookupWorkflow.
func (mr *MockManagerMockRecorder) LookupWorkflow(ctx, domainID, wfID, rID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupWorkflow", reflect.TypeOf((*MockManager)(nil).LookupWorkflow), ctx, domainID, wfID, rID)
}

// RegisterChangeCallback mocks base method.
func (m *MockManager) RegisterChangeCallback(shardID int, callback func(ChangeType)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterChangeCallback", shardID, callback)
}

// RegisterChangeCallback indicates an expected call of RegisterChangeCallback.
func (mr *MockManagerMockRecorder) RegisterChangeCallback(shardID, callback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterChangeCallback", reflect.TypeOf((*MockManager)(nil).RegisterChangeCallback), shardID, callback)
}

// Start mocks base method.
func (m *MockManager) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockManagerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockManager)(nil).Start))
}

// Stop mocks base method.
func (m *MockManager) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockManagerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockManager)(nil).Stop))
}

// SupportedExternalEntityType mocks base method.
func (m *MockManager) SupportedExternalEntityType(entityType string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportedExternalEntityType", entityType)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportedExternalEntityType indicates an expected call of SupportedExternalEntityType.
func (mr *MockManagerMockRecorder) SupportedExternalEntityType(entityType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportedExternalEntityType", reflect.TypeOf((*MockManager)(nil).SupportedExternalEntityType), entityType)
}

// UnregisterChangeCallback mocks base method.
func (m *MockManager) UnregisterChangeCallback(shardID int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnregisterChangeCallback", shardID)
}

// UnregisterChangeCallback indicates an expected call of UnregisterChangeCallback.
func (mr *MockManagerMockRecorder) UnregisterChangeCallback(shardID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterChangeCallback", reflect.TypeOf((*MockManager)(nil).UnregisterChangeCallback), shardID)
}
