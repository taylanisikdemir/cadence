// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/cadence/common/activecluster (interfaces: Manager)
//
// Generated by this command:
//
//	mockgen -package activecluster -destination manager_mock.go -self_package github.com/uber/cadence/common/activecluster github.com/uber/cadence/common/activecluster Manager
//

// Package activecluster is a generated GoMock package.
package activecluster

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	types "github.com/uber/cadence/common/types"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// LookupExternalEntity mocks base method.
func (m *MockManager) LookupExternalEntity(ctx context.Context, entityType, entityKey string) (*LookupResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupExternalEntity", ctx, entityType, entityKey)
	ret0, _ := ret[0].(*LookupResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupExternalEntity indicates an expected call of LookupExternalEntity.
func (mr *MockManagerMockRecorder) LookupExternalEntity(ctx, entityType, entityKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupExternalEntity", reflect.TypeOf((*MockManager)(nil).LookupExternalEntity), ctx, entityType, entityKey)
}

// LookupExternalEntityOfNewWorkflow mocks base method.
func (m *MockManager) LookupExternalEntityOfNewWorkflow(ctx context.Context, req *types.HistoryStartWorkflowExecutionRequest) (*LookupResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupExternalEntityOfNewWorkflow", ctx, req)
	ret0, _ := ret[0].(*LookupResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupExternalEntityOfNewWorkflow indicates an expected call of LookupExternalEntityOfNewWorkflow.
func (mr *MockManagerMockRecorder) LookupExternalEntityOfNewWorkflow(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupExternalEntityOfNewWorkflow", reflect.TypeOf((*MockManager)(nil).LookupExternalEntityOfNewWorkflow), ctx, req)
}

// LookupFailoverVersion mocks base method.
func (m *MockManager) LookupFailoverVersion(failoverVersion int64, domainID string) (*LookupResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupFailoverVersion", failoverVersion, domainID)
	ret0, _ := ret[0].(*LookupResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupFailoverVersion indicates an expected call of LookupFailoverVersion.
func (mr *MockManagerMockRecorder) LookupFailoverVersion(failoverVersion, domainID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupFailoverVersion", reflect.TypeOf((*MockManager)(nil).LookupFailoverVersion), failoverVersion, domainID)
}

// LookupWorkflow mocks base method.
func (m *MockManager) LookupWorkflow(ctx context.Context, domainID, wfID, rID string) (*LookupResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupWorkflow", ctx, domainID, wfID, rID)
	ret0, _ := ret[0].(*LookupResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupWorkflow indicates an expected call of LookupWorkflow.
func (mr *MockManagerMockRecorder) LookupWorkflow(ctx, domainID, wfID, rID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupWorkflow", reflect.TypeOf((*MockManager)(nil).LookupWorkflow), ctx, domainID, wfID, rID)
}

// RegisterChangeCallback mocks base method.
func (m *MockManager) RegisterChangeCallback(shardID int, callback func(ChangeType)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterChangeCallback", shardID, callback)
}

// RegisterChangeCallback indicates an expected call of RegisterChangeCallback.
func (mr *MockManagerMockRecorder) RegisterChangeCallback(shardID, callback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterChangeCallback", reflect.TypeOf((*MockManager)(nil).RegisterChangeCallback), shardID, callback)
}

// Start mocks base method.
func (m *MockManager) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockManagerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockManager)(nil).Start))
}

// Stop mocks base method.
func (m *MockManager) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockManagerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockManager)(nil).Stop))
}

// UnregisterChangeCallback mocks base method.
func (m *MockManager) UnregisterChangeCallback(shardID int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnregisterChangeCallback", shardID)
}

// UnregisterChangeCallback indicates an expected call of UnregisterChangeCallback.
func (mr *MockManagerMockRecorder) UnregisterChangeCallback(shardID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterChangeCallback", reflect.TypeOf((*MockManager)(nil).UnregisterChangeCallback), shardID)
}
